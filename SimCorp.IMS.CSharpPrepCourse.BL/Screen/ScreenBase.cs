using System;

namespace SimCorp.IMS.CSharpPrepCourse.BL.Screen
{
    public abstract class ScreenBase: IScreen
    {
        #region Constructors
        //this - chains many constructors inside class
        //base - chains constructors between inherited classes 

        public ScreenBase()
        {
            //Default ctor
            //def values in constructor overwrite default values on properties below
            // all autogenerated properties recalculates if any of depend on properties were changed
            PixelHeight = 1080; // default value
            PixelWidth = 1920; // default value
            DiagonalInInches = 4.7; // default value

        }
        public ScreenBase(int pixelHeight, int pixelWidth) : this()
        {
            PixelHeight = pixelHeight;
            PixelWidth = pixelWidth;
        }
        public ScreenBase(int pixelHeight, int pixelWidth, double diagonalInInches) : this(pixelHeight, pixelWidth)
        {
            PixelHeight = pixelHeight;
            PixelWidth = pixelWidth;
            DiagonalInInches = diagonalInInches;
        }
        #endregion

        #region Properties
        private int _pixelHeight;
        public int PixelHeight
        {
            get { return _pixelHeight; }
            private set
            {
                if (value > 0)
                {
                    _pixelHeight = value;
                }
                else
                {
                    throw new ArgumentException($"Value must be bigger than 0", nameof(PixelHeight));
                };
            }
        }


        private int _pixelWidth { get; set; }
        public int PixelWidth
        {
            get { return _pixelWidth; }
            private set
            {
                if (value > 0)
                {
                    _pixelWidth = value;
                }
                else
                {
                    throw new ArgumentException($"Value must be bigger than 0", nameof(PixelWidth));
                };
            }
        }


        public double DiagonalInInches { get; private set; }

        public string AspectRatio
        {
            get { return ReturnAspectRatio(PixelHeight, PixelWidth); }
        }
        #endregion

        #region Methods
        public override abstract string ToString();
        #endregion
        #region Private Methods
        private static int? ReturnGreatestCommonDivisor(int height, int width)
        {
            while (height != 0 && width != 0)
            {
                if (height > width)
                {
                    height %= width;
                }
                else
                {
                    width %= height;
                }

            }
            return height | width;
        }
        private string ReturnAspectRatio(int height, int width)
        {
            int? GCD = ReturnGreatestCommonDivisor(height, width);

            string AP = width / GCD + ":" + height / GCD;

            return AP;
        }

        public abstract void Show();
        #endregion



    }
}
